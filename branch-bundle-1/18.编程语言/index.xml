<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>18.C&#43;&#43;编程语言 on Maloudown</title>
    <link>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 18.C&#43;&#43;编程语言 on Maloudown</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 22 Oct 2024 23:05:58 +0800</lastBuildDate>
    <atom:link href="https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>6.STL库学习笔记之分配器</title>
      <link>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/6.stl%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%86%E9%85%8D%E5%99%A8/</link>
      <pubDate>Tue, 22 Oct 2024 23:05:58 +0800</pubDate>
      <guid>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/6.stl%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%86%E9%85%8D%E5%99%A8/</guid>
      <description>分配器 附件</description>
    </item>
    <item>
      <title>5.STL库学习笔记</title>
      <link>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/5.stl%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 21 Oct 2024 12:11:35 +0800</pubDate>
      <guid>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/5.stl%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>学习资料 CPLusPlus.com CppReference.com gcc.gnu.org 《STL源码剖析》 STL六大组件 容器-Containers，申请内存用于存储数据 分配器-Allocators，配合容器分配内存</description>
    </item>
    <item>
      <title>4.C&#43;&#43;2.0特性的使用</title>
      <link>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%802.0%E7%89%B9%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 17 Oct 2024 13:47:59 +0800</pubDate>
      <guid>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%802.0%E7%89%B9%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>VS 2022的设置 首先你可以先用下面的代码测试使用可以执行： #include &amp;lt;iostream&amp;gt; void printTypes() { } template &amp;lt;typename T, typename... U&amp;gt; void printTypes(const T&amp;amp; t, const U&amp;amp;... u) { std::cout &amp;lt;&amp;lt; t &amp;lt;&amp;lt; std::endl; printTypes(u...); } int main() { printTypes(&amp;#39;a&amp;#39;, 1.5, &amp;#39;b&amp;#39;); }如果报错了，如t</description>
    </item>
    <item>
      <title>3.导读</title>
      <link>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/3.%E5%AF%BC%E8%AF%BB/</link>
      <pubDate>Wed, 16 Oct 2024 17:47:34 +0800</pubDate>
      <guid>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/3.%E5%AF%BC%E8%AF%BB/</guid>
      <description>书籍推荐 《C++ Premier》 《C++ Programming Language》 《Effective Modern C++》 《Efficient C++》 《The C++ standard libra</description>
    </item>
    <item>
      <title>2.组合与继承</title>
      <link>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Wed, 16 Oct 2024 13:43:29 +0800</pubDate>
      <guid>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2.%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/</guid>
      <description>类与类的三种关系 Composition-复合 以我个人的理解，复合就是一个类中包含有另外一个类，使用到另一个类的内容。复合的类他们的构造和析构</description>
    </item>
    <item>
      <title>1.代码编写规范</title>
      <link>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/1.%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</link>
      <pubDate>Tue, 15 Oct 2024 19:54:02 +0800</pubDate>
      <guid>https://wungmeisilong.github.io/branch-bundle-1/18.%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/1.%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</guid>
      <description>如何写一个标准的.h文件 以下内容来自B站。 接下来将以复数的库文件为例来回答这个问题，下面是一段参考复数库文件代码： class complex { private: /* data */ double re,im; friend complex&amp;amp; __doapl (complex*,const</description>
    </item>
  </channel>
</rss>